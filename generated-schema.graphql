# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateComment {
  count: Int!
}

type AggregateImagen {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type AggregateVideo2 {
  count: Int!
}

input AuthInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  id: String!
  name: String!
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]
}

input CategoryCreateInput {
  id: String
  name: String!
  posts: PostCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateWithoutPostsInput {
  id: String
  name: String!
}

enum CategoryDistinctFieldEnum {
  id
  name
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  id: SortOrder
  name: SortOrder
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
}

input CategoryUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPostsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPostsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateWithoutPostsDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithWhereUniqueWithoutPostsInput {
  data: CategoryUpdateWithoutPostsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput!
  update: CategoryUpdateWithoutPostsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  posts: PostListRelationFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

type Comment {
  createdAt: Timestamp!
  id: String!
  message: String
  post: Post!
  postId: String!
  user: User
  userId: String
}

input CommentCreateInput {
  createdAt: Timestamp
  id: String
  message: String
  post: PostCreateOneWithoutCommentsInput!
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutUserInput!]
}

input CommentCreateWithoutPostInput {
  createdAt: Timestamp
  id: String
  message: String
  user: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  createdAt: Timestamp
  id: String
  message: String
  post: PostCreateOneWithoutCommentsInput!
}

enum CommentDistinctFieldEnum {
  createdAt
  id
  message
  postId
  userId
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  postId: SortOrder
  userId: SortOrder
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringNullableFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  postId: StringFilter
  userId: StringNullableFilter
}

input CommentUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutUserInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutPostDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  data: CommentUpdateWithoutUserDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringNullableFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  post: PostWhereInput
  postId: StringFilter
  user: UserWhereInput
  userId: StringNullableFilter
}

input CommentWhereUniqueInput {
  id: String
}

input DateTimeFieldUpdateOperationsInput {
  set: Timestamp
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

type Imagen {
  format: String!
  id: String!
  name: String!
}

input ImagenCreateInput {
  format: String!
  id: String
  name: String!
}

enum ImagenDistinctFieldEnum {
  format
  id
  name
}

input ImagenOrderByInput {
  format: SortOrder
  id: SortOrder
  name: SortOrder
}

input ImagenUpdateInput {
  format: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ImagenUpdateManyMutationInput {
  format: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ImagenWhereInput {
  AND: [ImagenWhereInput!]
  format: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [ImagenWhereInput!]
  OR: [ImagenWhereInput!]
}

input ImagenWhereUniqueInput {
  id: String
  name: String
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createComment(data: CommentCreateInput!): Comment!
  createImagen(data: ImagenCreateInput!): Imagen!
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createVideo(data: VideoCreateInput!): Video!
  createVideo2(data: Video2CreateInput!): Video2!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteImagen(where: ImagenWhereUniqueInput!): Imagen
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteManyImagen(where: ImagenWhereInput): BatchPayload!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyVideo(where: VideoWhereInput): BatchPayload!
  deleteManyVideo2(where: Video2WhereInput): BatchPayload!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideo2(where: Video2WhereUniqueInput!): Video2
  login(login: AuthInput!): AuthPayload!
  publishPost(id: String!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateImagen(data: ImagenUpdateInput!, where: ImagenWhereUniqueInput!): Imagen
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyImagen(data: ImagenUpdateManyMutationInput!, where: ImagenWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyVideo(data: VideoUpdateManyMutationInput!, where: VideoWhereInput): BatchPayload!
  updateManyVideo2(data: Video2UpdateManyMutationInput!, where: Video2WhereInput): BatchPayload!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updateVideo2(data: Video2UpdateInput!, where: Video2WhereUniqueInput!): Video2
  upsertComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertImagen(create: ImagenCreateInput!, update: ImagenUpdateInput!, where: ImagenWhereUniqueInput!): Imagen!
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertVideo(create: VideoCreateInput!, update: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video!
  upsertVideo2(create: Video2CreateInput!, update: Video2UpdateInput!, where: Video2WhereUniqueInput!): Video2!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""encript password in scalar type"""
scalar Password

type Post {
  author: User!
  authorId: String!
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryDistinctFieldEnum!], orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  content: String!
  createdAt: Timestamp!
  id: String!
  published: Boolean!
  title: String!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  categories: CategoryCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  content: String!
  createdAt: Timestamp
  id: String
  published: Boolean
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutCategoriesInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutCategoriesInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  categories: CategoryCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  content: String!
  createdAt: Timestamp
  id: String
  published: Boolean
  title: String!
}

input PostCreateWithoutCategoriesInput {
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  content: String!
  createdAt: Timestamp
  id: String
  published: Boolean
  title: String!
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput!
  categories: CategoryCreateManyWithoutPostsInput
  content: String!
  createdAt: Timestamp
  id: String
  published: Boolean
  title: String!
}

enum PostDistinctFieldEnum {
  authorId
  content
  createdAt
  id
  published
  title
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BoolFilter
  title: StringFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  categories: CategoryUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  categories: CategoryUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  categories: CategoryUpdateManyWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BoolFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: String
  title: String
}

type Profile {
  bio: String!
  id: String!
  user: User!
  userId: String!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  bio: String!
  id: String
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserDataInput {
  bio: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserDataInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bio: StringFilter
  id: StringFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateImagen(cursor: ImagenWhereUniqueInput, distinct: [ImagenDistinctFieldEnum!], orderBy: [ImagenOrderByInput!], skip: Int, take: Int, where: ImagenWhereInput): AggregateImagen!
  aggregatePost(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateVideo(cursor: VideoWhereUniqueInput, distinct: [VideoDistinctFieldEnum!], orderBy: [VideoOrderByInput!], skip: Int, take: Int, where: VideoWhereInput): AggregateVideo!
  aggregateVideo2(cursor: Video2WhereUniqueInput, distinct: [Video2DistinctFieldEnum!], orderBy: [Video2OrderByInput!], skip: Int, take: Int, where: Video2WhereInput): AggregateVideo2!
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryDistinctFieldEnum!], orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  imagen(where: ImagenWhereUniqueInput!): Imagen
  imagens(cursor: ImagenWhereUniqueInput, distinct: [ImagenDistinctFieldEnum!], orderBy: [ImagenOrderByInput!], skip: Int, take: Int, where: ImagenWhereInput): [Imagen!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  profile: User!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  video(where: VideoWhereUniqueInput!): Video
  video2(where: Video2WhereUniqueInput!): Video2
  video2s(cursor: Video2WhereUniqueInput, distinct: [Video2DistinctFieldEnum!], orderBy: [Video2OrderByInput!], skip: Int, take: Int, where: Video2WhereInput): [Video2!]!
  videos(cursor: VideoWhereUniqueInput, distinct: [VideoDistinctFieldEnum!], orderBy: [VideoOrderByInput!], skip: Int, take: Int, where: VideoWhereInput): [Video!]!
}

type Resolution {
  id: String!
  name: String!
  video: Video2!
  videoId: String!
}

input ResolutionCreateManyWithoutVideoInput {
  connect: [ResolutionWhereUniqueInput!]
  create: [ResolutionCreateWithoutVideoInput!]
}

input ResolutionCreateWithoutVideoInput {
  id: String
  name: String!
}

enum ResolutionDistinctFieldEnum {
  id
  name
  videoId
}

input ResolutionListRelationFilter {
  every: ResolutionWhereInput
  none: ResolutionWhereInput
  some: ResolutionWhereInput
}

input ResolutionOrderByInput {
  id: SortOrder
  name: SortOrder
  videoId: SortOrder
}

input ResolutionScalarWhereInput {
  AND: [ResolutionScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [ResolutionScalarWhereInput!]
  OR: [ResolutionScalarWhereInput!]
  videoId: StringFilter
}

input ResolutionUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ResolutionUpdateManyWithoutVideoInput {
  connect: [ResolutionWhereUniqueInput!]
  create: [ResolutionCreateWithoutVideoInput!]
  delete: [ResolutionWhereUniqueInput!]
  deleteMany: [ResolutionScalarWhereInput!]
  disconnect: [ResolutionWhereUniqueInput!]
  set: [ResolutionWhereUniqueInput!]
  update: [ResolutionUpdateWithWhereUniqueWithoutVideoInput!]
  updateMany: [ResolutionUpdateManyWithWhereNestedInput!]
  upsert: [ResolutionUpsertWithWhereUniqueWithoutVideoInput!]
}

input ResolutionUpdateManyWithWhereNestedInput {
  data: ResolutionUpdateManyDataInput!
  where: ResolutionScalarWhereInput!
}

input ResolutionUpdateWithoutVideoDataInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ResolutionUpdateWithWhereUniqueWithoutVideoInput {
  data: ResolutionUpdateWithoutVideoDataInput!
  where: ResolutionWhereUniqueInput!
}

input ResolutionUpsertWithWhereUniqueWithoutVideoInput {
  create: ResolutionCreateWithoutVideoInput!
  update: ResolutionUpdateWithoutVideoDataInput!
  where: ResolutionWhereUniqueInput!
}

input ResolutionWhereInput {
  AND: [ResolutionWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [ResolutionWhereInput!]
  OR: [ResolutionWhereInput!]
  video: Video2WhereInput
  videoId: StringFilter
}

input ResolutionWhereUniqueInput {
  id: String
  name: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  commenthEvent(postId: String!): Comment!
  publishEvent: Post!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentDistinctFieldEnum!], orderBy: [CommentOrderByInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  email: String!
  id: String!
  name: String!
  password: String!
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]
  profile: Profile
}

input UserCreateInput {
  email: String!
  name: String!
  password: Password!
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  id: String
  name: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateManyWithoutUserInput
  email: String!
  id: String
  name: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
}

enum UserDistinctFieldEnum {
  email
  id
  name
  password
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateWithoutCommentsDataInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  comments: CommentUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comments: CommentListRelationFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  posts: PostListRelationFilter
  profile: ProfileWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type Video {
  format: String!
  hls: Boolean!
  id: String!
  name: String!
}

type Video2 {
  id: String!
  name: String!
  resolutions(cursor: ResolutionWhereUniqueInput, distinct: [ResolutionDistinctFieldEnum!], orderBy: [ResolutionOrderByInput!], skip: Int, take: Int, where: ResolutionWhereInput): [Resolution!]
  web: Boolean!
}

input Video2CreateInput {
  id: String
  name: String!
  resolutions: ResolutionCreateManyWithoutVideoInput
  web: Boolean
}

enum Video2DistinctFieldEnum {
  id
  name
  web
}

input Video2OrderByInput {
  id: SortOrder
  name: SortOrder
  web: SortOrder
}

input Video2UpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolutions: ResolutionUpdateManyWithoutVideoInput
  web: BoolFieldUpdateOperationsInput
}

input Video2UpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  web: BoolFieldUpdateOperationsInput
}

input Video2WhereInput {
  AND: [Video2WhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [Video2WhereInput!]
  OR: [Video2WhereInput!]
  resolutions: ResolutionListRelationFilter
  web: BoolFilter
}

input Video2WhereUniqueInput {
  id: String
  name: String
}

input VideoCreateInput {
  format: String!
  hls: Boolean
  id: String
  name: String!
}

enum VideoDistinctFieldEnum {
  format
  hls
  id
  name
}

input VideoOrderByInput {
  format: SortOrder
  hls: SortOrder
  id: SortOrder
  name: SortOrder
}

input VideoUpdateInput {
  format: StringFieldUpdateOperationsInput
  hls: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VideoUpdateManyMutationInput {
  format: StringFieldUpdateOperationsInput
  hls: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  format: StringFilter
  hls: BoolFilter
  id: StringFilter
  name: StringFilter
  NOT: [VideoWhereInput!]
  OR: [VideoWhereInput!]
}

input VideoWhereUniqueInput {
  id: String
  name: String
}
